
LCD_KeyPad_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000055a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000153b  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d6  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a69  00000000  00000000  00002411  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a7  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a0  00000000  00000000  00003473  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003c13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ed 01 	call	0x3da	; 0x3da <main>
  7a:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_Init>:
uint8_t Keypad_C[] = {C0, C1, C2, C3};

void KEYPAD_Init()
{
	//Rows as input
	DataDir_KEYPAD_PORT &= ~(1<<R0);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT &= ~(1<<R1);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT &= ~(1<<R2);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT &= ~(1<<R3);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	81 bb       	out	0x11, r24	; 17
	//Columns  as output
	DataDir_KEYPAD_PORT |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	80 6f       	ori	r24, 0xF0	; 240
  9e:	81 bb       	out	0x11, r24	; 17
	//Pull Up Resistors On & Vcc on output pins
	KEYPAD_PORT = 0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	08 95       	ret

000000a6 <LCD_KICK>:
	DataDir_LCD_PORT = 0xFF;
	#elif LCD_MODE == FOUR_BIT_MODE
	DataDir_LCD_PORT |= 0xF0;
	#endif
	//RW = Write
	LCD_CTRL &= ~(1 << RW_SWITCH);
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	89 ef       	ldi	r24, 0xF9	; 249
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_KICK+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_KICK+0x10>
  b6:	00 00       	nop
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	87 7f       	andi	r24, 0xF7	; 247
  bc:	88 bb       	out	0x18, r24	; 24
  be:	08 95       	ret

000000c0 <LCD_WRITE_COMMAND>:
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	9c 2f       	mov	r25, r28
  d6:	90 7f       	andi	r25, 0xF0	; 240
  d8:	89 2b       	or	r24, r25
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_KICK>
  e0:	81 ee       	ldi	r24, 0xE1	; 225
  e2:	94 e0       	ldi	r25, 0x04	; 4
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WRITE_COMMAND+0x24>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WRITE_COMMAND+0x2a>
  ea:	00 00       	nop
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	30 e1       	ldi	r19, 0x10	; 16
  f0:	c3 9f       	mul	r28, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	92 2f       	mov	r25, r18
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	89 2b       	or	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_KICK>
 102:	83 ef       	ldi	r24, 0xF3	; 243
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_WRITE_COMMAND+0x46>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_WRITE_COMMAND+0x4c>
 10c:	00 00       	nop
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <LCD_GOTO_XY>:
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	39 f4       	brne	.+14     	; 0x124 <LCD_GOTO_XY+0x12>
 116:	60 31       	cpi	r22, 0x10	; 16
 118:	68 f4       	brcc	.+26     	; 0x134 <LCD_GOTO_XY+0x22>
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	86 0f       	add	r24, r22
 11e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 122:	08 95       	ret
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	31 f4       	brne	.+12     	; 0x134 <LCD_GOTO_XY+0x22>
 128:	60 32       	cpi	r22, 0x20	; 32
 12a:	20 f4       	brcc	.+8      	; 0x134 <LCD_GOTO_XY+0x22>
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	86 0f       	add	r24, r22
 130:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 134:	08 95       	ret

00000136 <LCD_WRITE_CHAR>:
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	88 bb       	out	0x18, r24	; 24
 140:	88 b3       	in	r24, 0x18	; 24
 142:	82 60       	ori	r24, 0x02	; 2
 144:	88 bb       	out	0x18, r24	; 24
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	9c 2f       	mov	r25, r28
 14c:	90 7f       	andi	r25, 0xF0	; 240
 14e:	89 2b       	or	r24, r25
 150:	8b bb       	out	0x1b, r24	; 27
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_KICK>
 156:	81 ee       	ldi	r24, 0xE1	; 225
 158:	94 e0       	ldi	r25, 0x04	; 4
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_WRITE_CHAR+0x24>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_WRITE_CHAR+0x2a>
 160:	00 00       	nop
 162:	2b b3       	in	r18, 0x1b	; 27
 164:	30 e1       	ldi	r19, 0x10	; 16
 166:	c3 9f       	mul	r28, r19
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	92 2f       	mov	r25, r18
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	89 2b       	or	r24, r25
 172:	8b bb       	out	0x1b, r24	; 27
 174:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_KICK>
 178:	81 ee       	ldi	r24, 0xE1	; 225
 17a:	94 e0       	ldi	r25, 0x04	; 4
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_WRITE_CHAR+0x46>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_WRITE_CHAR+0x4c>
 182:	00 00       	nop
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <LCD_Clear_Screen>:
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 18e:	08 95       	ret

00000190 <LCD_INIT>:
 190:	87 e8       	ldi	r24, 0x87	; 135
 192:	93 e1       	ldi	r25, 0x13	; 19
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_INIT+0x4>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_INIT+0xa>
 19a:	00 00       	nop
 19c:	87 b3       	in	r24, 0x17	; 23
 19e:	8e 60       	ori	r24, 0x0E	; 14
 1a0:	87 bb       	out	0x17, r24	; 23
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	87 7f       	andi	r24, 0xF7	; 247
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_Clear_Screen>
 1ac:	8a b3       	in	r24, 0x1a	; 26
 1ae:	80 6f       	ori	r24, 0xF0	; 240
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 1b8:	83 e3       	ldi	r24, 0x33	; 51
 1ba:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
 1d8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
 1dc:	08 95       	ret

000001de <LCD_WRITE_STRING>:
 1de:	cf 92       	push	r12
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	c1 2c       	mov	r12, r1
 1ee:	d1 2c       	mov	r13, r1
 1f0:	76 01       	movw	r14, r12
 1f2:	22 c0       	rjmp	.+68     	; 0x238 <LCD_WRITE_STRING+0x5a>
 1f4:	9f ef       	ldi	r25, 0xFF	; 255
 1f6:	c9 1a       	sub	r12, r25
 1f8:	d9 0a       	sbc	r13, r25
 1fa:	e9 0a       	sbc	r14, r25
 1fc:	f9 0a       	sbc	r15, r25
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 204:	80 e1       	ldi	r24, 0x10	; 16
 206:	c8 16       	cp	r12, r24
 208:	d1 04       	cpc	r13, r1
 20a:	e1 04       	cpc	r14, r1
 20c:	f1 04       	cpc	r15, r1
 20e:	29 f4       	brne	.+10     	; 0x21a <LCD_WRITE_STRING+0x3c>
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
 218:	0f c0       	rjmp	.+30     	; 0x238 <LCD_WRITE_STRING+0x5a>
 21a:	90 e2       	ldi	r25, 0x20	; 32
 21c:	c9 16       	cp	r12, r25
 21e:	d1 04       	cpc	r13, r1
 220:	e1 04       	cpc	r14, r1
 222:	f1 04       	cpc	r15, r1
 224:	49 f4       	brne	.+18     	; 0x238 <LCD_WRITE_STRING+0x5a>
 226:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_Clear_Screen>
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
 232:	c1 2c       	mov	r12, r1
 234:	d1 2c       	mov	r13, r1
 236:	76 01       	movw	r14, r12
 238:	88 81       	ld	r24, Y
 23a:	81 11       	cpse	r24, r1
 23c:	db cf       	rjmp	.-74     	; 0x1f4 <LCD_WRITE_STRING+0x16>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	08 95       	ret

0000024c <LCD_STORE_Custom_CHARACTER>:
	
}

void LCD_STORE_Custom_CHARACTER()
{
	LCD_WRITE_COMMAND(64); //0x40
 24c:	80 e4       	ldi	r24, 0x40	; 64
 24e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	
	//Loading 1
	LCD_WRITE_CHAR(0b00000);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00011);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00110);
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b01000);
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11000);
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b10000);
 270:	80 e1       	ldi	r24, 0x10	; 16
 272:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b10000);
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b10000);
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	
	//Loading 2
	LCD_WRITE_CHAR(0b00111);
 282:	87 e0       	ldi	r24, 0x07	; 7
 284:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11000);
 288:	88 e1       	ldi	r24, 0x18	; 24
 28a:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);		
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	 
	//Loading 3
	LCD_WRITE_CHAR(0b11100);
 2b2:	8c e1       	ldi	r24, 0x1C	; 28
 2b4:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00011);
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	
	//Loading 4
	LCD_WRITE_CHAR(0b00000);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b10000);
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11000);
 2ee:	88 e1       	ldi	r24, 0x18	; 24
 2f0:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00110);
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00011);
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00001);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00001);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00001);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	
	//Loading 5
	LCD_WRITE_CHAR(0b00001);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00001);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00011);
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00010);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00100);
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11000);
 330:	88 e1       	ldi	r24, 0x18	; 24
 332:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b10000);
 336:	80 e1       	ldi	r24, 0x10	; 16
 338:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	
	//Loading 6
	LCD_WRITE_CHAR(0b00000);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00111);
 366:	87 e0       	ldi	r24, 0x07	; 7
 368:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11100);
 36c:	8c e1       	ldi	r24, 0x1C	; 28
 36e:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	
	//Loading 7
	LCD_WRITE_CHAR(0b00000);
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11000);
 396:	88 e1       	ldi	r24, 0x18	; 24
 398:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00111);
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	
	//Loading 8
	LCD_WRITE_CHAR(0b10000);
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b10000);
 3a8:	80 e1       	ldi	r24, 0x10	; 16
 3aa:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b11000);
 3ae:	88 e1       	ldi	r24, 0x18	; 24
 3b0:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b01000);
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00100);
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00011);
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00001);
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0b00000);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 3d2:	08 95       	ret

000003d4 <LCD_Display_Custom_CHARACTER>:
	LCD_WRITE_COMMAND(0x02);*/
	
}
void LCD_Display_Custom_CHARACTER(uint8_t CGRAM_Index)
{
	LCD_WRITE_CHAR(CGRAM_Index);
 3d4:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 3d8:	08 95       	ret

000003da <main>:



int main(void)
{
	LCD_INIT();
 3da:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_INIT>
	KEYPAD_Init();
 3de:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_Init>
	LCD_STORE_Custom_CHARACTER();
 3e2:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_STORE_Custom_CHARACTER>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(1,5);
 3ec:	65 e0       	ldi	r22, 0x05	; 5
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
	LCD_WRITE_STRING("Loading");
 3f4:	80 e6       	ldi	r24, 0x60	; 96
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_STRING>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	83 ef       	ldi	r24, 0xF3	; 243
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	_delay_ms(2);
	LCD_GOTO_XY(2,5);
 408:	65 e0       	ldi	r22, 0x05	; 5
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
	LCD_WRITE_STRING("Please Wait");
 410:	88 e6       	ldi	r24, 0x68	; 104
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_STRING>
 418:	83 ef       	ldi	r24, 0xF3	; 243
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
	uint8_t position = 0;
    /* Replace with your application code */
    while (1) 
    {
		row = 1;
		for(col =0, position=0, Prev_col = -1 ; col < 4 ; col++, Prev_col++ , position++)
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	df ef       	ldi	r29, 0xFF	; 255
 428:	c0 e0       	ldi	r28, 0x00	; 0
 42a:	23 c0       	rjmp	.+70     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		{
			LCD_GOTO_XY(row, col);
 42c:	6c 2f       	mov	r22, r28
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
			LCD_Display_Custom_CHARACTER(position);
 434:	81 2f       	mov	r24, r17
 436:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_Display_Custom_CHARACTER>
 43a:	9f e9       	ldi	r25, 0x9F	; 159
 43c:	26 e8       	ldi	r18, 0x86	; 134
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	91 50       	subi	r25, 0x01	; 1
 442:	20 40       	sbci	r18, 0x00	; 0
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
			_delay_ms(500);
			LCD_GOTO_XY(row, Prev_col);
 44c:	6d 2f       	mov	r22, r29
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
			LCD_WRITE_CHAR(0x20);
 454:	80 e2       	ldi	r24, 0x20	; 32
 456:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 45a:	9f e9       	ldi	r25, 0x9F	; 159
 45c:	26 e8       	ldi	r18, 0x86	; 134
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	91 50       	subi	r25, 0x01	; 1
 462:	20 40       	sbci	r18, 0x00	; 0
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
	uint8_t position = 0;
    /* Replace with your application code */
    while (1) 
    {
		row = 1;
		for(col =0, position=0, Prev_col = -1 ; col < 4 ; col++, Prev_col++ , position++)
 46c:	cf 5f       	subi	r28, 0xFF	; 255
 46e:	df 5f       	subi	r29, 0xFF	; 255
 470:	1f 5f       	subi	r17, 0xFF	; 255
 472:	c4 30       	cpi	r28, 0x04	; 4
 474:	d8 f2       	brcs	.-74     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			LCD_GOTO_XY(row, Prev_col);
			LCD_WRITE_CHAR(0x20);
			_delay_ms(500);
		}
		
		LCD_GOTO_XY(row, Prev_col);
 476:	6d 2f       	mov	r22, r29
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(0x20);
 47e:	80 e2       	ldi	r24, 0x20	; 32
 480:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 484:	9f e9       	ldi	r25, 0x9F	; 159
 486:	26 e8       	ldi	r18, 0x86	; 134
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	91 50       	subi	r25, 0x01	; 1
 48c:	20 40       	sbci	r18, 0x00	; 0
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 494:	00 00       	nop
		_delay_ms(500);
		row = 2;
		col--;
 496:	c1 50       	subi	r28, 0x01	; 1
		
		for(; col > 0 ; col--, Prev_col-- , position++)
 498:	27 c0       	rjmp	.+78     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
		{
			LCD_GOTO_XY(row, col);
 49a:	6c 2f       	mov	r22, r28
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
			LCD_Display_Custom_CHARACTER(position);
 4a2:	81 2f       	mov	r24, r17
 4a4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_Display_Custom_CHARACTER>
 4a8:	9f e9       	ldi	r25, 0x9F	; 159
 4aa:	26 e8       	ldi	r18, 0x86	; 134
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	20 40       	sbci	r18, 0x00	; 0
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
			_delay_ms(500);
			if(col == 3)
 4ba:	c3 30       	cpi	r28, 0x03	; 3
 4bc:	89 f0       	breq	.+34     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
			{
				Prev_col = 4;
				continue;
			}
			LCD_GOTO_XY(row, Prev_col);
 4be:	6d 2f       	mov	r22, r29
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
			LCD_WRITE_CHAR(0x20);
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 4cc:	9f e9       	ldi	r25, 0x9F	; 159
 4ce:	26 e8       	ldi	r18, 0x86	; 134
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	91 50       	subi	r25, 0x01	; 1
 4d4:	20 40       	sbci	r18, 0x00	; 0
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4dc:	00 00       	nop
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
			LCD_GOTO_XY(row, col);
			LCD_Display_Custom_CHARACTER(position);
			_delay_ms(500);
			if(col == 3)
			{
				Prev_col = 4;
 4e0:	d4 e0       	ldi	r29, 0x04	; 4
		LCD_WRITE_CHAR(0x20);
		_delay_ms(500);
		row = 2;
		col--;
		
		for(; col > 0 ; col--, Prev_col-- , position++)
 4e2:	c1 50       	subi	r28, 0x01	; 1
 4e4:	d1 50       	subi	r29, 0x01	; 1
 4e6:	1f 5f       	subi	r17, 0xFF	; 255
 4e8:	c1 11       	cpse	r28, r1
 4ea:	d7 cf       	rjmp	.-82     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			}
			LCD_GOTO_XY(row, Prev_col);
			LCD_WRITE_CHAR(0x20);
			_delay_ms(500);
		}
		LCD_GOTO_XY(row,Prev_col);
 4ec:	6d 2f       	mov	r22, r29
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(0x20);
 4f4:	80 e2       	ldi	r24, 0x20	; 32
 4f6:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 4fa:	9f e9       	ldi	r25, 0x9F	; 159
 4fc:	26 e8       	ldi	r18, 0x86	; 134
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	91 50       	subi	r25, 0x01	; 1
 502:	20 40       	sbci	r18, 0x00	; 0
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
		_delay_ms(500);
		LCD_GOTO_XY(row,col);
 50c:	6c 2f       	mov	r22, r28
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(position);
 514:	81 2f       	mov	r24, r17
 516:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 51a:	9f e9       	ldi	r25, 0x9F	; 159
 51c:	26 e8       	ldi	r18, 0x86	; 134
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	91 50       	subi	r25, 0x01	; 1
 522:	20 40       	sbci	r18, 0x00	; 0
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
		_delay_ms(500);
		LCD_GOTO_XY(row,col);
 52c:	6c 2f       	mov	r22, r28
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(0x20);
 534:	80 e2       	ldi	r24, 0x20	; 32
 536:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_WRITE_CHAR>
 53a:	9f e9       	ldi	r25, 0x9F	; 159
 53c:	26 e8       	ldi	r18, 0x86	; 134
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	91 50       	subi	r25, 0x01	; 1
 542:	20 40       	sbci	r18, 0x00	; 0
 544:	80 40       	sbci	r24, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 54a:	00 00       	nop
		_delay_ms(500);
		row =1; col =0;
		LCD_GOTO_XY(row,0);
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 89 00 	call	0x112	; 0x112 <LCD_GOTO_XY>
		
		
    }
 554:	67 cf       	rjmp	.-306    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
