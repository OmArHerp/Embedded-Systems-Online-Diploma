
Simple_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082e  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fc  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024f  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001acd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 77 00 	call	0xee	; 0xee <main>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Push_button_init>:
}

void Push_button_init()
{
	//Set the 3 PushButtons as input (With External PUR)
	Push_Button_Direction &= ~((1<<TENS_button) | (1<<UNITS_button) | (1<<ENTER_buttton));
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	88 7f       	andi	r24, 0xF8	; 248
  70:	84 bb       	out	0x14, r24	; 20
  72:	08 95       	ret

00000074 <LED_init>:
	
}
void LED_init()
{
	//Set LED & Buzzer as output 
	LED_BUZZER_Direction |= ((1<<LED_GREEN) | (1<<LED_YELLOW) | (1<<LED_RED) | (1<<BUZZER));
  74:	8a b3       	in	r24, 0x1a	; 26
  76:	8f 60       	ori	r24, 0x0F	; 15
  78:	8a bb       	out	0x1a, r24	; 26
	LED_BUZZER_PORT |=((1<<LED_GREEN) | (1<<LED_YELLOW) | (1<<LED_RED) | (1<<BUZZER));
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	8f 60       	ori	r24, 0x0F	; 15
  7e:	8b bb       	out	0x1b, r24	; 27
  80:	08 95       	ret

00000082 <Sev_Seg_init>:
	
}
void Sev_Seg_init()
{
	//Make Sev_Seg pins output
	Seven_Seg_Direction = 0b00111111 ;
  82:	8f e3       	ldi	r24, 0x3F	; 63
  84:	81 bb       	out	0x11, r24	; 17
  86:	08 95       	ret

00000088 <Sev_Seg_display_Num>:
	//Seven_Seg_PORT = 0xF0;
	
}
void Sev_Seg_display_Num(uint8_t num)
{
	if(num > 99)
  88:	84 36       	cpi	r24, 0x64	; 100
  8a:	08 f0       	brcs	.+2      	; 0x8e <Sev_Seg_display_Num+0x6>
		num = 99;
  8c:	83 e6       	ldi	r24, 0x63	; 99
	uint8_t tens = num/10;
  8e:	9d ec       	ldi	r25, 0xCD	; 205
  90:	89 9f       	mul	r24, r25
  92:	91 2d       	mov	r25, r1
  94:	11 24       	eor	r1, r1
  96:	96 95       	lsr	r25
  98:	96 95       	lsr	r25
  9a:	96 95       	lsr	r25
	uint8_t units = num%10;	
  9c:	39 2f       	mov	r19, r25
  9e:	33 0f       	add	r19, r19
  a0:	23 2f       	mov	r18, r19
  a2:	22 0f       	add	r18, r18
  a4:	22 0f       	add	r18, r18
  a6:	23 0f       	add	r18, r19
  a8:	82 1b       	sub	r24, r18
  aa:	28 2f       	mov	r18, r24
	
	//Write tens
	
	//Enable 7Seg1 & Disable 7Seg2
	Seven_Seg_PORT &= ~(1<<SEG1_EN);
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	82 bb       	out	0x12, r24	; 18
	Seven_Seg_PORT |= (1<<SEG2_EN);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	82 bb       	out	0x12, r24	; 18
	Seven_Seg_PORT = (Seven_Seg_PORT & 0xF0) | tens ;
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	98 2b       	or	r25, r24
  be:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8b e4       	ldi	r24, 0x4B	; 75
  c2:	9d e1       	ldi	r25, 0x1D	; 29
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <Sev_Seg_display_Num+0x3c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <Sev_Seg_display_Num+0x42>
  ca:	00 00       	nop
	_delay_ms(30);
	
	
	//Enable 7Seg2 & Disable 7Seg1
	Seven_Seg_PORT |= (1<<SEG1_EN);
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	82 bb       	out	0x12, r24	; 18
	Seven_Seg_PORT &= ~(1<<SEG2_EN);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 bb       	out	0x12, r24	; 18
	//Write Units
	Seven_Seg_PORT = (Seven_Seg_PORT & 0xF0) | units ;
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	28 2b       	or	r18, r24
  de:	22 bb       	out	0x12, r18	; 18
  e0:	8b e4       	ldi	r24, 0x4B	; 75
  e2:	9d e1       	ldi	r25, 0x1D	; 29
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <Sev_Seg_display_Num+0x5c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <Sev_Seg_display_Num+0x62>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <main>:
void Sev_Seg_init();
void Sev_Seg_display_Num(uint8_t num);

int main(void)
{
	Push_button_init();
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <Push_button_init>
	LED_init();
  f2:	0e 94 3a 00 	call	0x74	; 0x74 <LED_init>
	Sev_Seg_init();
  f6:	0e 94 41 00 	call	0x82	; 0x82 <Sev_Seg_init>
	uint8_t Num = 0;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    {
		//Tens_button pressed
		if( ((Push_Button_PIN >> TENS_button) & 1) == PRESSED)
  fc:	98 99       	sbic	0x13, 0	; 19
  fe:	0c c0       	rjmp	.+24     	; 0x118 <main+0x2a>
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	93 e1       	ldi	r25, 0x13	; 19
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x16>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x1c>
 10a:	00 00       	nop
		{
			//Debounce effect
			_delay_ms(20);
			if(((Push_Button_PIN >> TENS_button) & 1) == PRESSED)
 10c:	98 99       	sbic	0x13, 0	; 19
 10e:	51 c0       	rjmp	.+162    	; 0x1b2 <main+0xc4>
			{
				while(((Push_Button_PIN >> TENS_button) & 1) == PRESSED); //Single Pressing
 110:	98 9b       	sbis	0x13, 0	; 19
 112:	fe cf       	rjmp	.-4      	; 0x110 <main+0x22>
				Num = Num + 10; //Increase the tense
 114:	c6 5f       	subi	r28, 0xF6	; 246
 116:	4d c0       	rjmp	.+154    	; 0x1b2 <main+0xc4>
			}
		}
		//Units_button pressed
		else if(((Push_Button_PIN >> UNITS_button) & 1) == PRESSED)
 118:	99 99       	sbic	0x13, 1	; 19
 11a:	0c c0       	rjmp	.+24     	; 0x134 <main+0x46>
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x32>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x38>
 126:	00 00       	nop
		{
			//Debounce effect
			_delay_ms(20);
			if(((Push_Button_PIN >> UNITS_button) & 1) == PRESSED)
 128:	99 99       	sbic	0x13, 1	; 19
 12a:	43 c0       	rjmp	.+134    	; 0x1b2 <main+0xc4>
			{
				while(((Push_Button_PIN >> UNITS_button) & 1) == PRESSED); //Single Pressing
 12c:	99 9b       	sbis	0x13, 1	; 19
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x3e>
				Num++; //Increase the Units
 130:	cf 5f       	subi	r28, 0xFF	; 255
 132:	3f c0       	rjmp	.+126    	; 0x1b2 <main+0xc4>
			}
		}
		//Enter_button pressed
		else if(((Push_Button_PIN >> ENTER_buttton) & 1) == PRESSED)
 134:	9a 99       	sbic	0x13, 2	; 19
 136:	30 c0       	rjmp	.+96     	; 0x198 <main+0xaa>
 138:	87 e8       	ldi	r24, 0x87	; 135
 13a:	93 e1       	ldi	r25, 0x13	; 19
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x4e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x54>
 142:	00 00       	nop
		{
			//Debounce effect
			_delay_ms(20);
			if(((Push_Button_PIN >> ENTER_buttton) & 1) == PRESSED)
 144:	9a 99       	sbic	0x13, 2	; 19
 146:	35 c0       	rjmp	.+106    	; 0x1b2 <main+0xc4>
			{
				while(((Push_Button_PIN >> ENTER_buttton) & 1) == PRESSED); //Single Pressing
 148:	9a 9b       	sbis	0x13, 2	; 19
 14a:	fe cf       	rjmp	.-4      	; 0x148 <main+0x5a>
				if(Num == PASSWORD)
 14c:	c1 33       	cpi	r28, 0x31	; 49
 14e:	41 f4       	brne	.+16     	; 0x160 <main+0x72>
				{
					//LED GREEN ON for 5 sec
					LED_BUZZER_PORT ^= (1<<LED_GREEN);
 150:	9b b3       	in	r25, 0x1b	; 27
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	89 27       	eor	r24, r25
 156:	8b bb       	out	0x1b, r24	; 27
					
					while(1)
					{
						Sev_Seg_display_Num(Num);
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 44 00 	call	0x88	; 0x88 <Sev_Seg_display_Num>
 15e:	fc cf       	rjmp	.-8      	; 0x158 <main+0x6a>
					
				}
				else
				{
					//LED RED,YELLOW AND BUZZER ON for 5 sec
					LED_BUZZER_PORT ^= (1<<LED_YELLOW);
 160:	9b b3       	in	r25, 0x1b	; 27
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	89 27       	eor	r24, r25
 166:	8b bb       	out	0x1b, r24	; 27
					LED_BUZZER_PORT ^= (1<<LED_RED);
 168:	9b b3       	in	r25, 0x1b	; 27
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	89 27       	eor	r24, r25
 16e:	8b bb       	out	0x1b, r24	; 27
					LED_BUZZER_PORT ^= (1<<BUZZER);
 170:	9b b3       	in	r25, 0x1b	; 27
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	98 27       	eor	r25, r24
 176:	9b bb       	out	0x1b, r25	; 27
 178:	9f e3       	ldi	r25, 0x3F	; 63
 17a:	22 e4       	ldi	r18, 0x42	; 66
 17c:	3f e0       	ldi	r19, 0x0F	; 15
 17e:	91 50       	subi	r25, 0x01	; 1
 180:	20 40       	sbci	r18, 0x00	; 0
 182:	30 40       	sbci	r19, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x90>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x9a>
 188:	00 00       	nop
					_delay_ms(5000);
					LED_BUZZER_PORT ^= (1<<BUZZER);
 18a:	9b b3       	in	r25, 0x1b	; 27
 18c:	89 27       	eor	r24, r25
 18e:	8b bb       	out	0x1b, r24	; 27
					while(1)
					{
						Sev_Seg_display_Num(Num);
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 44 00 	call	0x88	; 0x88 <Sev_Seg_display_Num>
 196:	fc cf       	rjmp	.-8      	; 0x190 <main+0xa2>
					}
				}
			}
		}
		else if (((Push_Button_PIN >> RESET_buttton) & 1) == PRESSED )
 198:	9b 99       	sbic	0x13, 3	; 19
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <main+0xc4>
 19c:	87 e8       	ldi	r24, 0x87	; 135
 19e:	93 e1       	ldi	r25, 0x13	; 19
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0xb2>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xb8>
 1a6:	00 00       	nop
		{
			//Debounce effect
			_delay_ms(20);
			if(((Push_Button_PIN >> RESET_buttton) & 1) == PRESSED)
 1a8:	9b 99       	sbic	0x13, 3	; 19
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <main+0xc4>
			{
				while(((Push_Button_PIN >> UNITS_button) & 1) == PRESSED); //Single Pressing
 1ac:	99 9b       	sbis	0x13, 1	; 19
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <main+0xbe>
				Num = 0; //Reset the count
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
		
		Sev_Seg_display_Num(Num);
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 44 00 	call	0x88	; 0x88 <Sev_Seg_display_Num>
    }
 1b8:	a1 cf       	rjmp	.-190    	; 0xfc <main+0xe>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
