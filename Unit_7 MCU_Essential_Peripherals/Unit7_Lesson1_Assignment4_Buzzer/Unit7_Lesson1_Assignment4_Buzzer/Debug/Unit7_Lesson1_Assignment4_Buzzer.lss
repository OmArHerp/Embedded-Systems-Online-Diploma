
Unit7_Lesson1_Assignment4_Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000582  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
}

void GPIO_init()
{
	//preparing PushButton (Pull Down)
	ClrBit(DDRD,PD0);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	//Preparing Relay connected with buzzer
	SetBit(DDRD,PD4);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 61       	ori	r24, 0x10	; 16
  76:	81 bb       	out	0x11, r24	; 17
  78:	08 95       	ret

0000007a <main>:

void GPIO_init();

int main(void)
{
	GPIO_init();
  7a:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	87 e8       	ldi	r24, 0x87	; 135
  80:	93 e1       	ldi	r25, 0x13	; 19
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x8>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0xe>
  88:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(20);
		if(GetBit(PIND,PD0) == Pressed)
  8a:	80 9b       	sbis	0x10, 0	; 16
  8c:	f8 cf       	rjmp	.-16     	; 0x7e <main+0x4>
		{
			while(GetBit(PIND,PD0) == Pressed);
  8e:	80 99       	sbic	0x10, 0	; 16
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0x14>
			SetBit(PORTD,PD4);
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 61       	ori	r24, 0x10	; 16
  96:	82 bb       	out	0x12, r24	; 18
  98:	9f e3       	ldi	r25, 0x3F	; 63
  9a:	2d e0       	ldi	r18, 0x0D	; 13
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	91 50       	subi	r25, 0x01	; 1
  a0:	20 40       	sbci	r18, 0x00	; 0
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x24>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x2e>
  a8:	00 00       	nop
			_delay_ms(1000);
			ClrBit(PORTD,PD4);
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	e6 cf       	rjmp	.-52     	; 0x7e <main+0x4>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
