
Unit7_Lesson1_Assignment3_7SegmentMultiplixing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000715  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c9  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000376  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012d  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
	{
		for(i=0 ; i<255 ; i++);
		--x;
	}
	
}
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	84 bb       	out	0x14, r24	; 20
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	81 bb       	out	0x11, r24	; 17
  74:	08 95       	ret

00000076 <Seven_Segment_Enable1>:
void Seven_Segment_Enable1()
{
	ClrBit(PORTD,SevSegment1_EN);
  76:	82 b3       	in	r24, 0x12	; 18
  78:	8e 7f       	andi	r24, 0xFE	; 254
  7a:	82 bb       	out	0x12, r24	; 18
  7c:	08 95       	ret

0000007e <Seven_Segment_Enable2>:
}
void Seven_Segment_Enable2()
{
	ClrBit(PORTD,SevSegment2_EN);
  7e:	82 b3       	in	r24, 0x12	; 18
  80:	8d 7f       	andi	r24, 0xFD	; 253
  82:	82 bb       	out	0x12, r24	; 18
  84:	08 95       	ret

00000086 <Seven_Segment_Disable1>:
}
void Seven_Segment_Disable1()
{
	SetBit(PORTD,SevSegment1_EN);
  86:	82 b3       	in	r24, 0x12	; 18
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	08 95       	ret

0000008e <Seven_Segment_Disable2>:
}
void Seven_Segment_Disable2()
{
	SetBit(PORTD,SevSegment2_EN);
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	82 60       	ori	r24, 0x02	; 2
  92:	82 bb       	out	0x12, r24	; 18
  94:	08 95       	ret

00000096 <main>:
void Seven_Segment_Disable1();
void Seven_Segment_Disable2();

int main(void)
{
	GPIO_init();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
	unsigned char i,j,count;
    /* Replace with your application code */
    while (1) 
    {	
		for(i=0; i<10 ; i++)
  9a:	10 e0       	ldi	r17, 0x00	; 0
  9c:	21 c0       	rjmp	.+66     	; 0xe0 <main+0x4a>
		{
			for(j=0; j<10 ; j++)
			{
				for(count =0; count < 20 ; count++)
				{
					Seven_Segment_Enable1();
  9e:	0e 94 3b 00 	call	0x76	; 0x76 <Seven_Segment_Enable1>
					Seven_Segment_Disable2();
  a2:	0e 94 47 00 	call	0x8e	; 0x8e <Seven_Segment_Disable2>
					PORTC = 0b0000 | i;
  a6:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	89 e6       	ldi	r24, 0x69	; 105
  aa:	98 e1       	ldi	r25, 0x18	; 24
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x1c>
  b2:	00 00       	nop
					_delay_ms(25);
					Seven_Segment_Disable1();
  b4:	0e 94 43 00 	call	0x86	; 0x86 <Seven_Segment_Disable1>
					Seven_Segment_Enable2();
  b8:	0e 94 3f 00 	call	0x7e	; 0x7e <Seven_Segment_Enable2>
					PORTC = 0b0000 | j;
  bc:	d5 bb       	out	0x15, r29	; 21
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x2c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x32>
  c8:	00 00       	nop
    {	
		for(i=0; i<10 ; i++)
		{
			for(j=0; j<10 ; j++)
			{
				for(count =0; count < 20 ; count++)
  ca:	cf 5f       	subi	r28, 0xFF	; 255
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <main+0x3a>
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	c4 31       	cpi	r28, 0x14	; 20
  d2:	28 f3       	brcs	.-54     	; 0x9e <main+0x8>
    /* Replace with your application code */
    while (1) 
    {	
		for(i=0; i<10 ; i++)
		{
			for(j=0; j<10 ; j++)
  d4:	df 5f       	subi	r29, 0xFF	; 255
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x44>
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	da 30       	cpi	r29, 0x0A	; 10
  dc:	c0 f3       	brcs	.-16     	; 0xce <main+0x38>
	GPIO_init();
	unsigned char i,j,count;
    /* Replace with your application code */
    while (1) 
    {	
		for(i=0; i<10 ; i++)
  de:	1f 5f       	subi	r17, 0xFF	; 255
  e0:	1a 30       	cpi	r17, 0x0A	; 10
  e2:	d0 f3       	brcs	.-12     	; 0xd8 <main+0x42>
  e4:	da cf       	rjmp	.-76     	; 0x9a <main+0x4>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
