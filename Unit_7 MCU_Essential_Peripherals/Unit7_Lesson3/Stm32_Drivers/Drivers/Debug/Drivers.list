
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000530  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000530  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018fc  00000000  00000000  00010559  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000400  00000000  00000000  00011e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003fc  00000000  00000000  00012255  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b8  00000000  00000000  00012658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00012710  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001bea  00000000  00000000  000127a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000cf6  00000000  00000000  0001438a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000076d4  00000000  00000000  00015080  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c754  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000218  00000000  00000000  0001c7d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000510 	.word	0x08000510

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000510 	.word	0x08000510

08000170 <main>:

void Clock_init();
void GPIO_init();

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	unsigned volatile  int i = 0 ;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]


	Clock_init();
 800017a:	f000 f827 	bl	80001cc <Clock_init>
	GPIO_init();
 800017e:	f000 f839 	bl	80001f4 <GPIO_init>


	while(1)
	{
		//PA1 >> PUR (connected to vcc)
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == 0 ) // press
 8000182:	2102      	movs	r1, #2
 8000184:	480f      	ldr	r0, [pc, #60]	; (80001c4 <main+0x54>)
 8000186:	f000 f976 	bl	8000476 <MCAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d10b      	bne.n	80001a8 <main+0x38>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN1);
 8000190:	2102      	movs	r1, #2
 8000192:	480d      	ldr	r0, [pc, #52]	; (80001c8 <main+0x58>)
 8000194:	f000 f986 	bl	80004a4 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == 0 ); //Single Press
 8000198:	bf00      	nop
 800019a:	2102      	movs	r1, #2
 800019c:	4809      	ldr	r0, [pc, #36]	; (80001c4 <main+0x54>)
 800019e:	f000 f96a 	bl	8000476 <MCAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <main+0x2a>
		}

		//PA13 >> PDR (connected to ground)
		if(  MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN13) == 1 ) // press
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <main+0x54>)
 80001ae:	f000 f962 	bl	8000476 <MCAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d1e4      	bne.n	8000182 <main+0x12>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN13); // Multi Press
 80001b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001bc:	4802      	ldr	r0, [pc, #8]	; (80001c8 <main+0x58>)
 80001be:	f000 f971 	bl	80004a4 <MCAL_GPIO_TogglePin>
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == 0 ) // press
 80001c2:	e7de      	b.n	8000182 <main+0x12>
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <Clock_init>:
	for(i ; i <5000 ; i++);

	return 0;
}
void Clock_init()
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLCK_EN() ;
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <Clock_init+0x24>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a06      	ldr	r2, [pc, #24]	; (80001f0 <Clock_init+0x24>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6193      	str	r3, [r2, #24]

	//Enable clock GPIOB
	RCC_GPIOB_CLCK_EN() ;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <Clock_init+0x24>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <Clock_init+0x24>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6193      	str	r3, [r2, #24]

}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40021000 	.word	0x40021000

080001f4 <GPIO_init>:
void GPIO_init()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg ;


	//PA1 input HighZ (Floaing input (reset state))
	PinCfg.GPIO_PinNumber = GPIO_PIN1 ;
 80001fa:	2302      	movs	r3, #2
 80001fc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80001fe:	2301      	movs	r3, #1
 8000200:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4619      	mov	r1, r3
 8000206:	4814      	ldr	r0, [pc, #80]	; (8000258 <GPIO_init+0x64>)
 8000208:	f000 f8b6 	bl	8000378 <MCAL_GPIO_Init>

	//PA13 input HighZ
	PinCfg.GPIO_PinNumber = GPIO_PIN13 ;
 800020c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000210:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000212:	2301      	movs	r3, #1
 8000214:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg) ;
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	480f      	ldr	r0, [pc, #60]	; (8000258 <GPIO_init+0x64>)
 800021c:	f000 f8ac 	bl	8000378 <MCAL_GPIO_Init>

	//PB1 Output push pull mode
	PinCfg.GPIO_PinNumber = GPIO_PIN1 ;
 8000220:	2302      	movs	r3, #2
 8000222:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000224:	2304      	movs	r3, #4
 8000226:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000228:	2301      	movs	r3, #1
 800022a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg) ;
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	4619      	mov	r1, r3
 8000230:	480a      	ldr	r0, [pc, #40]	; (800025c <GPIO_init+0x68>)
 8000232:	f000 f8a1 	bl	8000378 <MCAL_GPIO_Init>

	//PB13 Output push pull mode
	PinCfg.GPIO_PinNumber = GPIO_PIN13 ;
 8000236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800023a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800023c:	2304      	movs	r3, #4
 800023e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000240:	2301      	movs	r3, #1
 8000242:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg) ;
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <GPIO_init+0x68>)
 800024a:	f000 f895 	bl	8000378 <MCAL_GPIO_Init>

}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010800 	.word	0x40010800
 800025c:	40010c00 	.word	0x40010c00

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f91b 	bl	80004c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ff6d 	bl	8000170 <main>

08000296 <LoopForever>:

LoopForever:
    b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	08000530 	.word	0x08000530
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>

080002b2 <Get_CRLH_Position>:


#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	4603      	mov	r3, r0
 80002ba:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80002bc:	88fb      	ldrh	r3, [r7, #6]
 80002be:	2b80      	cmp	r3, #128	; 0x80
 80002c0:	d042      	beq.n	8000348 <Get_CRLH_Position+0x96>
 80002c2:	2b80      	cmp	r3, #128	; 0x80
 80002c4:	dc11      	bgt.n	80002ea <Get_CRLH_Position+0x38>
 80002c6:	2b08      	cmp	r3, #8
 80002c8:	d036      	beq.n	8000338 <Get_CRLH_Position+0x86>
 80002ca:	2b08      	cmp	r3, #8
 80002cc:	dc06      	bgt.n	80002dc <Get_CRLH_Position+0x2a>
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d02e      	beq.n	8000330 <Get_CRLH_Position+0x7e>
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	d02e      	beq.n	8000334 <Get_CRLH_Position+0x82>
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d028      	beq.n	800032c <Get_CRLH_Position+0x7a>
 80002da:	e047      	b.n	800036c <Get_CRLH_Position+0xba>
 80002dc:	2b20      	cmp	r3, #32
 80002de:	d02f      	beq.n	8000340 <Get_CRLH_Position+0x8e>
 80002e0:	2b40      	cmp	r3, #64	; 0x40
 80002e2:	d02f      	beq.n	8000344 <Get_CRLH_Position+0x92>
 80002e4:	2b10      	cmp	r3, #16
 80002e6:	d029      	beq.n	800033c <Get_CRLH_Position+0x8a>
 80002e8:	e040      	b.n	800036c <Get_CRLH_Position+0xba>
 80002ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002ee:	d033      	beq.n	8000358 <Get_CRLH_Position+0xa6>
 80002f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002f4:	dc09      	bgt.n	800030a <Get_CRLH_Position+0x58>
 80002f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002fa:	d029      	beq.n	8000350 <Get_CRLH_Position+0x9e>
 80002fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000300:	d028      	beq.n	8000354 <Get_CRLH_Position+0xa2>
 8000302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000306:	d021      	beq.n	800034c <Get_CRLH_Position+0x9a>
 8000308:	e030      	b.n	800036c <Get_CRLH_Position+0xba>
 800030a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800030e:	d027      	beq.n	8000360 <Get_CRLH_Position+0xae>
 8000310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000314:	dc03      	bgt.n	800031e <Get_CRLH_Position+0x6c>
 8000316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800031a:	d01f      	beq.n	800035c <Get_CRLH_Position+0xaa>
 800031c:	e026      	b.n	800036c <Get_CRLH_Position+0xba>
 800031e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000322:	d01f      	beq.n	8000364 <Get_CRLH_Position+0xb2>
 8000324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000328:	d01e      	beq.n	8000368 <Get_CRLH_Position+0xb6>
 800032a:	e01f      	b.n	800036c <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN0:
		return 0;
 800032c:	2300      	movs	r3, #0
 800032e:	e01e      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8000330:	2304      	movs	r3, #4
 8000332:	e01c      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000334:	2308      	movs	r3, #8
 8000336:	e01a      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000338:	230c      	movs	r3, #12
 800033a:	e018      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 800033c:	2310      	movs	r3, #16
 800033e:	e016      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000340:	2314      	movs	r3, #20
 8000342:	e014      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000344:	2318      	movs	r3, #24
 8000346:	e012      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000348:	231c      	movs	r3, #28
 800034a:	e010      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 800034c:	2300      	movs	r3, #0
 800034e:	e00e      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000350:	2304      	movs	r3, #4
 8000352:	e00c      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8000354:	2308      	movs	r3, #8
 8000356:	e00a      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 8000358:	230c      	movs	r3, #12
 800035a:	e008      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 800035c:	2310      	movs	r3, #16
 800035e:	e006      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000360:	2314      	movs	r3, #20
 8000362:	e004      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8000364:	2318      	movs	r3, #24
 8000366:	e002      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 8000368:	231c      	movs	r3, #28
 800036a:	e000      	b.n	800036e <Get_CRLH_Position+0xbc>
		break;

	}
	return 0;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <MCAL_GPIO_Init>:
 * 					But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 					E,F DOESN'T EXIST IN THIS PACKAGE!
 */

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000382:	2300      	movs	r3, #0
 8000384:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000386:	2300      	movs	r3, #0
 8000388:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN8)?  &GPIOx->CRL : &GPIOx->CRH ;
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	2bff      	cmp	r3, #255	; 0xff
 8000390:	d801      	bhi.n	8000396 <MCAL_GPIO_Init+0x1e>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	e001      	b.n	800039a <MCAL_GPIO_Init+0x22>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3304      	adds	r3, #4
 800039a:	60bb      	str	r3, [r7, #8]
	//clear MODE[1:0] CNF[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff86 	bl	80002b2 <Get_CRLH_Position>
 80003a6:	4603      	mov	r3, r0
 80003a8:	461a      	mov	r2, r3
 80003aa:	230f      	movs	r3, #15
 80003ac:	4093      	lsls	r3, r2
 80003ae:	43da      	mvns	r2, r3
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	401a      	ands	r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	601a      	str	r2, [r3, #0]

	//if Pin is o/p
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)  ||
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	2b07      	cmp	r3, #7
 80003c0:	d00b      	beq.n	80003da <MCAL_GPIO_Init+0x62>
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	789b      	ldrb	r3, [r3, #2]
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d007      	beq.n	80003da <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	789b      	ldrb	r3, [r3, #2]
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)  ||
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d003      	beq.n	80003da <MCAL_GPIO_Init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	789b      	ldrb	r3, [r3, #2]
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d10e      	bne.n	80003f8 <MCAL_GPIO_Init+0x80>
	{
		//Set MODE[1:0] CNF[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	789b      	ldrb	r3, [r3, #2]
 80003de:	3b04      	subs	r3, #4
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	b25a      	sxtb	r2, r3
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	78db      	ldrb	r3, [r3, #3]
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	f003 030f 	and.w	r3, r3, #15
 80003f4:	73fb      	strb	r3, [r7, #15]
 80003f6:	e02c      	b.n	8000452 <MCAL_GPIO_Init+0xda>
	}
	//if Pin is I/p
	else // MODE = 00 Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	789b      	ldrb	r3, [r3, #2]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d003      	beq.n	8000408 <MCAL_GPIO_Init+0x90>
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d107      	bne.n	8000418 <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF[1:0]    MODE[1:0] -> 00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f ) ;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	789b      	ldrb	r3, [r3, #2]
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e01c      	b.n	8000452 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT ) //Consider it as input floating
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	789b      	ldrb	r3, [r3, #2]
 800041c:	2b08      	cmp	r3, #8
 800041e:	d102      	bne.n	8000426 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x00) & 0x0f ) ;
 8000420:	2304      	movs	r3, #4
 8000422:	73fb      	strb	r3, [r7, #15]
 8000424:	e015      	b.n	8000452 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x00) & 0x0f ) ;
 8000426:	2308      	movs	r3, #8
 8000428:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	789b      	ldrb	r3, [r3, #2]
 800042e:	2b02      	cmp	r3, #2
 8000430:	d107      	bne.n	8000442 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	8812      	ldrh	r2, [r2, #0]
 800043a:	431a      	orrs	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	e007      	b.n	8000452 <MCAL_GPIO_Init+0xda>

			}
			else //PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	8812      	ldrh	r2, [r2, #0]
 800044a:	43d2      	mvns	r2, r2
 800044c:	401a      	ands	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	60da      	str	r2, [r3, #12]

		}

	}
	// Write on CRL or CRH
	(*configregister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)  ) ;
 8000452:	7bfc      	ldrb	r4, [r7, #15]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff2a 	bl	80002b2 <Get_CRLH_Position>
 800045e:	4603      	mov	r3, r0
 8000460:	fa04 f203 	lsl.w	r2, r4, r3
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	431a      	orrs	r2, r3
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	601a      	str	r2, [r3, #0]


}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bd90      	pop	{r4, r7, pc}

08000476 <MCAL_GPIO_ReadPin>:
 * @param [in]		-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval			-the input pin value (two values based on @ref GPIO_PIN_state)
 * Note				-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000476:	b480      	push	{r7}
 8000478:	b085      	sub	sp, #20
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	460b      	mov	r3, r1
 8000480:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	689a      	ldr	r2, [r3, #8]
 8000486:	887b      	ldrh	r3, [r7, #2]
 8000488:	4013      	ands	r3, r2
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 800048e:	2301      	movs	r3, #1
 8000490:	73fb      	strb	r3, [r7, #15]
 8000492:	e001      	b.n	8000498 <MCAL_GPIO_ReadPin+0x22>
	}
	else //if PIN = 0
	{
		bitstatus = GPIO_PIN_RESET ;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
	}

	return bitstatus ;
 8000498:	7bfb      	ldrb	r3, [r7, #15]

}
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <MCAL_GPIO_TogglePin>:
 * @param [in]		-PinNumber: Toggle Pin Number according
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (uint32_t)(PinNumber);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68da      	ldr	r2, [r3, #12]
 80004b4:	887b      	ldrh	r3, [r7, #2]
 80004b6:	405a      	eors	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	60da      	str	r2, [r3, #12]

}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
	...

080004c8 <__libc_init_array>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	2500      	movs	r5, #0
 80004cc:	4e0c      	ldr	r6, [pc, #48]	; (8000500 <__libc_init_array+0x38>)
 80004ce:	4c0d      	ldr	r4, [pc, #52]	; (8000504 <__libc_init_array+0x3c>)
 80004d0:	1ba4      	subs	r4, r4, r6
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	42a5      	cmp	r5, r4
 80004d6:	d109      	bne.n	80004ec <__libc_init_array+0x24>
 80004d8:	f000 f81a 	bl	8000510 <_init>
 80004dc:	2500      	movs	r5, #0
 80004de:	4e0a      	ldr	r6, [pc, #40]	; (8000508 <__libc_init_array+0x40>)
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <__libc_init_array+0x44>)
 80004e2:	1ba4      	subs	r4, r4, r6
 80004e4:	10a4      	asrs	r4, r4, #2
 80004e6:	42a5      	cmp	r5, r4
 80004e8:	d105      	bne.n	80004f6 <__libc_init_array+0x2e>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004f0:	4798      	blx	r3
 80004f2:	3501      	adds	r5, #1
 80004f4:	e7ee      	b.n	80004d4 <__libc_init_array+0xc>
 80004f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004fa:	4798      	blx	r3
 80004fc:	3501      	adds	r5, #1
 80004fe:	e7f2      	b.n	80004e6 <__libc_init_array+0x1e>
 8000500:	08000528 	.word	0x08000528
 8000504:	08000528 	.word	0x08000528
 8000508:	08000528 	.word	0x08000528
 800050c:	0800052c 	.word	0x0800052c

08000510 <_init>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr

0800051c <_fini>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr
