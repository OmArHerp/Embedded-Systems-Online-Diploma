/*
 * Stm32_F103C6_gpio_driver.c
 *
 *  Created on: Oct 13, 2023
 *      Author: Herp
 */


#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
	switch (PinNumber)
	{
	case GPIO_PIN0:
		return 0;
		break;
	case GPIO_PIN1:
		return 4;
		break;
	case GPIO_PIN2:
		return 8;
		break;
	case GPIO_PIN3:
		return 12;
		break;
	case GPIO_PIN4:
		return 16;
		break;
	case GPIO_PIN5:
		return 20;
		break;
	case GPIO_PIN6:
		return 24;
		break;
	case GPIO_PIN7:
		return 28;
		break;
	case GPIO_PIN8:
		return 0;
		break;
	case GPIO_PIN9:
		return 4;
		break;
	case GPIO_PIN10:
		return 8;
		break;
	case GPIO_PIN11:
		return 12;
		break;
	case GPIO_PIN12:
		return 16;
		break;
	case GPIO_PIN13:
		return 20;
		break;
	case GPIO_PIN14:
		return 24;
		break;
	case GPIO_PIN15:
		return 28;
		break;

	}
	return 0;
}

/**===========================================================
 * @Fn				-MCAL_GPIO_Init
 * @brief 			-Initializes the GPIOx PINy according to the specified paramters in the PinConfig
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinConfig: pointer to a GPIO_PinConfig_t structure that contains
 * 					 the configuration information for the specified GPIO PIN.
 * @retval			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E,F Modules
 * 					But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 					E,F DOESN'T EXIST IN THIS PACKAGE!
 */

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
	uint8_t PIN_Config = 0 ;

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN8)?  &GPIOx->CRL : &GPIOx->CRH ;
	//clear MODE[1:0] CNF[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));

	//if Pin is o/p
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)  ||
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
	{
		//Set MODE[1:0] CNF[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
	}
	//if Pin is I/p
	else // MODE = 00 Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_Analog) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD))
		{
			//Set  CNF[1:0]    MODE[1:0] -> 00
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0f ) ;

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT ) //Consider it as input floating
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0) & 0x0f ) ;
		}
		else //PU PD
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f ) ;

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;


			}
			else //PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;

			}

		}

	}
	// Write on CRL or CRH
	(*configregister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)  ) ;


}




/**===========================================================
 * @Fn				-MCAL_GPIO_DeInit
 * @brief 			-Resets All the GPIO Registers
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
{
	// Method 1 to Reset the peripheral (from the data sheet see the reset values)
	//	GPIOx->BRR = 0x00000000;
	//	GPIOx->BSRR = 0x00000000;
	//	GPIOx->CRH = 0x44444444;
	//	GPIOx->CRL = 0x44444444;
	//	//GPIOx->IDR = ; (READ Only)
	//	GPIOx->LCKR = 0x00000000;
	//	GPIOx->ODR = 0x00000000;


	// Method 2 is to use the reset peripheral
	if(GPIOx == GPIOA)
	{
		RCC->APB2RSTR |= (1<<2); //Bit 2 to reset IOPA
		RCC->APB2RSTR &= ~(1<<2);
	}
	else if (GPIOx == GPIOB)
	{
		RCC->APB2RSTR |= (1<<3); //Bit 3 to reset IOPB
		RCC->APB2RSTR &= ~(1<<3);
	}
	else if (GPIOx == GPIOC)
	{
		RCC->APB2RSTR |= (1<<4); //Bit 4 to reset IOPC
		RCC->APB2RSTR &= ~(1<<4);
	}
	else if (GPIOx == GPIOD)
	{
		RCC->APB2RSTR |= (1<<5); //Bit 5 to reset IOPD
		RCC->APB2RSTR &= ~(1<<5);
	}
	else if (GPIOx == GPIOE)
	{
		RCC->APB2RSTR |= (1<<6); //Bit 6 to reset IOPE
		RCC->APB2RSTR &= ~(1<<6);
	}

}





/**===========================================================
 * @Fn				-MCAL_GPIO_ReadPin
 * @brief 			-Read Specific PIN
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval			-the input pin value (two values based on @ref GPIO_PIN_state)
 * Note				-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
	uint8_t bitstatus;
	if(((GPIOx->IDR) & PinNumber) != GPIO_PIN_RESET )
	{
		bitstatus = GPIO_PIN_SET ;
	}
	else //if PIN = 0
	{
		bitstatus = GPIO_PIN_RESET ;
	}

	return bitstatus ;

}




/**===========================================================
 * @Fn				-MCAL_GPIO_ReadPort
 * @brief 			-read the input port value
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @retval			-the input port value
 * Note				-none
 */
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx)
{
	uint16_t PortValue ;
	PortValue = (uint16_t) (GPIOx->IDR) ;
	return PortValue ;

}




/**===========================================================
 * @Fn				-MCAL_GPIO_WritePin
 * @brief 			-Write on Specific PIN
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @param [in]		-Value: Pin Value (Set or Reset)
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber , uint8_t Value)
{
	if( Value!= GPIO_PIN_RESET )
	{
		//GPIOx->ODR |= PinNumber;
		//or

		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;

	}
	else
	{
		//			Bits 31:16 BRy: Port x Reset bit y (y= 0 .. 15)
		//			These bits are write-only and can be accessed in Word mode only.
		//			0: No action on the corresponding ODRx bit
		//			1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;

	}

}




/**===========================================================
 * @Fn				-MCAL_GPIO_WritePort
 * @brief 			-Write on output port
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-Value: Port Value (Set or Reset)
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
	GPIOx->ODR = (uint32_t)Value;

}




/**===========================================================
 * @Fn				-MCAL_GPIO_TogglePin
 * @brief 			-Toggle on Specific PIN
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Toggle Pin Number according
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
	GPIOx->ODR ^= (PinNumber);

}




/**===========================================================
 * @Fn				-MCAL_GPIO_LockPin
 * @brief 			-The locking mechanism allows the IO configuration to be frozen
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: which pin to be locked
 * @retval			-ok if pin config is locked OR Error if pin is not locked (Ok & Error are defined @ref GPIO_RETURN_LOCK)
 * Note				-none
 */
uint8_t MCAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
//	Bit 16 LCKK[16]: Lock key
//	This bit can be read anytime. It can only be modified using the Lock Key Writing Sequence.
//	0: Port configuration lock key not active
//	1: Port configuration lock key active. GPIOx_LCKR register is locked until the next reset.
//	LOCK key writing sequence:
//	Write 1
//	Write 0
//	Write 1
//	Read 0
//	Read 1 (this read is optional but confirms that the lock is active)
//	Note: During the LOCK Key Writing sequence, the value of LCK[15:0] must not change.
//	Any error in the lock sequence will abort the lock.
//	Bits 15:0 LCKy: Port x Lock bit y (y= 0 .. 15)
//	These bits are read write but can only be written when the LCKK bit is 0.
//	0: Port configuration not locked
//	1: Port configuration locked.

	//Set Lock[16]
	volatile uint32_t tmp = 1<<16;
	//Set the LCKy
	tmp |= PinNumber ;
	//	Write 1
	GPIOx->LCKR = tmp ;
	//	Write 0
	//	Write 1
	//	Read 0
	//	Read 1 (this read is optional but confirms that the lock is active)

}
