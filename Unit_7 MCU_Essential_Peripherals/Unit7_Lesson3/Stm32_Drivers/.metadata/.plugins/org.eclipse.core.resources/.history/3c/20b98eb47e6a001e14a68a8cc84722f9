/*
 * Stm32_F103C6_gpio_driver.c
 *
 *  Created on: Oct 13, 2023
 *      Author: Herp
 */


#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
	switch (PinNumber)
	{
	case GPIO_PIN0:
		return 0;
		break;
	case GPIO_PIN1:
		return 4;
		break;
	case GPIO_PIN2:
		return 8;
		break;
	case GPIO_PIN3:
		return 12;
		break;
	case GPIO_PIN4:
		return 16;
		break;
	case GPIO_PIN5:
		return 20;
		break;
	case GPIO_PIN6:
		return 24;
		break;
	case GPIO_PIN7:
		return 28;
		break;
	case GPIO_PIN8:
		return 0;
		break;
	case GPIO_PIN9:
		return 4;
		break;
	case GPIO_PIN10:
		return 8;
		break;
	case GPIO_PIN11:
		return 12;
		break;
	case GPIO_PIN12:
		return 16;
		break;
	case GPIO_PIN13:
		return 20;
		break;
	case GPIO_PIN14:
		return 24;
		break;
	case GPIO_PIN15:
		return 28;
		break;

	}
	return 0;
}

/**===========================================================
 * @Fn				-MCAL_GPIO_Init
 * @brief 			-Initializes the GPIOx PINy according to the specified paramters in the PinConfig
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinConfig: pointer to a GPIO_PinConfig_t structure that contains
 * 					 the configuration information for the specified GPIO PIN.
 * @retval			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E,F Modules
 * 					But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 					E,F DOESN'T EXIST IN THIS PACKAGE!
 */

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN8)?  &GPIOx->CRL : &GPIOx->CRH ;
	//clear MODE[1:0] CNF[1:0]

}




/**===========================================================
 * @Fn				-MCAL_GPIO_DeInit
 * @brief 			-Resets All the GPIO Registers
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
{


}





/**===========================================================
 * @Fn				-MCAL_GPIO_ReadPin
 * @brief 			-Read Specific PIN
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval			-the input pin value (two values based on @ref GPIO_PIN_state)
 * Note				-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{

}




/**===========================================================
 * @Fn				-MCAL_GPIO_ReadPort
 * @brief 			-read the input port value
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @retval			-the input port value
 * Note				-none
 */
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx)
{

}




/**===========================================================
 * @Fn				-MCAL_GPIO_WritePin
 * @brief 			-Write on Specific PIN
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @param [in]		-Value: Pin Value (Set or Reset)
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber , uint8_t Value)
{

}




/**===========================================================
 * @Fn				-MCAL_GPIO_WritePort
 * @brief 			-Write on output port
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-Value: Port Value (Set or Reset)
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{

}




/**===========================================================
 * @Fn				-MCAL_GPIO_TogglePin
 * @brief 			-Toggle on Specific PIN
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Toggle Pin Number according
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{

}




/**===========================================================
 * @Fn				-MCAL_GPIO_LockPin
 * @brief 			-The locking mechanism allows the IO configuration to be frozen
 * @param [in]		-GPIOx: where x can be (A..F depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: which pin to be locked
 * @retval			-ok if pin config is locked OR Error if pin is not locked (Ok & Error are defined @ref GPIO_RETURN_LOCK)
 * Note				-none
 */
uint8_t MCAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{

}
