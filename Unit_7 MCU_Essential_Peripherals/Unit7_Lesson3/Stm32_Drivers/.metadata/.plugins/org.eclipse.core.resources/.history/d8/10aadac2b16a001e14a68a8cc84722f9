/**
 ******************************************************************************
 * @file           : main.c
 * @author         : OmArHerp
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


#include "Stm32f103x6.h"
#include "Stm32_F103C6_gpio_driver.h"



void Clock_init();
void GPIO_init();

int main(void)
{
	unsigned volatile  int i = 0 ;
	//Adjusting Prescaler AHB
	RCC_CFGR |= (0b0000 << 4); // -> NO Prescaler

	//Adjusting Prescaler APB1
	RCC_CFGR |= (0b100 << 8); // ->  Prescaler/2



	//Adjusting Prescaler APB2
	RCC_CFGR |= (0b101 << 11); // ->  Prescaler/2

	//Setting Internal Oscillator ON (8MHz) to be SYSCLK
	RCC_CR |= (1 << 0) ; // -> HSI ON
	RCC_CFGR |= (0b00 << 0); // -> HSI Selected


	Clock_init();
	GPIO_init();


	while(1)
	{
		//PA1 >> PUR (connected to vcc)
		if( ((GPIOA_IDR & (1<<1)) >> 1) == 0 ) // press
		{
			GPIOB_ODR ^=  1<<1;
			while(( ((GPIOA_IDR & (1<<1)) >> 1) == 0) ); //Single Press
		}

		//PA13 >> PDR (connected to ground)
		if( ((GPIOA_IDR & (1<<13)) >> 13) == 1 ) // press
		{
			GPIOB_ODR ^= 1<<13; // Multi Press

		}
	}

	for(i ; i <512 ; i++);

	return 0;
}
void Clock_init()
{
	//Enable clock GPIOA
	RCC_GPIOA_CLCK_EN() ;
	//Enable clock GPIOB
	RCC_GPIOB_CLCK_EN() ;

}
void GPIO_init()
{
	GPIO_PinConfig_t PinCfg ;


	//PA1 input HighZ (Floaing input (reset state))
	PinCfg.GPIO_PinNumber = GPIO_PIN1 ;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
	//PA13 input HighZ
	GPIOA_CRH &= ~(0b11 << 20);
	GPIOA_CRH |= (0b01 << 22);

	//PB1 Output push pull mode
	GPIOB_CRL &= ~(0b11 << 6);
	GPIOB_CRL |= (0b01 << 4);

	//PB13 Output push pull mode
	GPIOB_CRH &= ~(0b11 << 22);
	GPIOB_CRH |= (0b01 << 20);

}

