
Unit7_Lesson1(GPIO)_Assignment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cd  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055f  00000000  00000000  00000791  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000213  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f6  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  0000123e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
	}
}

void GPIO_init()
{
	SetBit(DDRD,7);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,6);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 64       	ori	r24, 0x40	; 64
  76:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	81 bb       	out	0x11, r24	; 17
	ClrBit(DDRD,0);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	81 bb       	out	0x11, r24	; 17
  84:	08 95       	ret

00000086 <main>:
void GPIO_init();
void Delay(int);

int main(void)
{
	GPIO_init();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
	enum Status led = LED1;
  8a:	82 e0       	ldi	r24, 0x02	; 2
    /* Replace with your application code */
    while (1) 
    {
		if(GetBit(PIND,0) == Pressed)
  8c:	80 9b       	sbis	0x10, 0	; 16
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x6>
		{
			Delay(1);
			while(GetBit(PIND,0) == Pressed);
  90:	80 99       	sbic	0x10, 0	; 16
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0xa>
			switch(led)
  94:	83 30       	cpi	r24, 0x03	; 3
  96:	61 f0       	breq	.+24     	; 0xb0 <main+0x2a>
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	91 f0       	breq	.+36     	; 0xc0 <main+0x3a>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	b1 f7       	brne	.-20     	; 0x8c <main+0x6>
			{
				case LED1: ClrBit(PORTD,7);
  a0:	92 b3       	in	r25, 0x12	; 18
  a2:	9f 77       	andi	r25, 0x7F	; 127
  a4:	92 bb       	out	0x12, r25	; 18
						   SetBit(PORTD,5); ++led;	
  a6:	92 b3       	in	r25, 0x12	; 18
  a8:	90 62       	ori	r25, 0x20	; 32
  aa:	92 bb       	out	0x12, r25	; 18
  ac:	8f 5f       	subi	r24, 0xFF	; 255
						   break;
  ae:	ee cf       	rjmp	.-36     	; 0x8c <main+0x6>
				case LED2: ClrBit(PORTD,5); 
  b0:	92 b3       	in	r25, 0x12	; 18
  b2:	9f 7d       	andi	r25, 0xDF	; 223
  b4:	92 bb       	out	0x12, r25	; 18
						   SetBit(PORTD,6); ++led;		
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	90 64       	ori	r25, 0x40	; 64
  ba:	92 bb       	out	0x12, r25	; 18
  bc:	8f 5f       	subi	r24, 0xFF	; 255
						   break;
  be:	e6 cf       	rjmp	.-52     	; 0x8c <main+0x6>
				case LED3: ClrBit(PORTD,6); 
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	82 bb       	out	0x12, r24	; 18
						   SetBit(PORTD,7); 
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	82 bb       	out	0x12, r24	; 18
						   led = LED1;
  cc:	82 e0       	ldi	r24, 0x02	; 2
						   break;
  ce:	de cf       	rjmp	.-68     	; 0x8c <main+0x6>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
