
Unit7_Lesson1(GPIO)_Section_Assignment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d4  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000572  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000217  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000306  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000052  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  7a:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GPIO_init>:
	}
}

void GPIO_init()
{
	SetBit(DDRD,7);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 68       	ori	r24, 0x80	; 128
  86:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,6);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,5);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	80 62       	ori	r24, 0x20	; 32
  92:	81 bb       	out	0x11, r24	; 17
	ClrBit(DDRD,0);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	81 bb       	out	0x11, r24	; 17
  9a:	08 95       	ret

0000009c <main>:
void GPIO_init();
void Delay(int);

int main(void)
{
	GPIO_init();
  9c:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_init>
    /* Replace with your application code */
    while (1) 
    {
		if(GetBit(PIND,0) == Pressed && (led < 8))
  a0:	80 9b       	sbis	0x10, 0	; 16
  a2:	16 c0       	rjmp	.+44     	; 0xd0 <main+0x34>
  a4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	28 30       	cpi	r18, 0x08	; 8
  aa:	90 f4       	brcc	.+36     	; 0xd0 <main+0x34>
		{
			while(GetBit(PIND,0) == Pressed);
  ac:	80 99       	sbic	0x10, 0	; 16
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x10>
			Delay(1);
			SetBit(PORTD,led);
  b0:	32 b3       	in	r19, 0x12	; 18
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x20>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	2a 95       	dec	r18
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x1c>
  c0:	83 2b       	or	r24, r19
  c2:	82 bb       	out	0x12, r24	; 18
			led++;
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	e8 cf       	rjmp	.-48     	; 0xa0 <main+0x4>
		}
		else if ((GetBit(PIND,0) == Pressed) && (led >= 8))
  d0:	80 9b       	sbis	0x10, 0	; 16
  d2:	e6 cf       	rjmp	.-52     	; 0xa0 <main+0x4>
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	10 f3       	brcs	.-60     	; 0xa0 <main+0x4>
		{
			while(GetBit(PIND,0) == Pressed);
  dc:	80 99       	sbic	0x10, 0	; 16
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x40>
			Delay(1);
			switch(led)
  e0:	89 30       	cpi	r24, 0x09	; 9
  e2:	69 f0       	breq	.+26     	; 0xfe <main+0x62>
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	a1 f0       	breq	.+40     	; 0x110 <main+0x74>
  e8:	88 30       	cpi	r24, 0x08	; 8
  ea:	d1 f6       	brne	.-76     	; 0xa0 <main+0x4>
			{
				case 8: ClrBit(PORTD,LED3); led ++; break;
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	8f 77       	andi	r24, 0x7F	; 127
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	d1 cf       	rjmp	.-94     	; 0xa0 <main+0x4>
				case 9: ClrBit(PORTD,LED2); led ++; break;
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8f 7b       	andi	r24, 0xBF	; 191
 102:	82 bb       	out	0x12, r24	; 18
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	c8 cf       	rjmp	.-112    	; 0xa0 <main+0x4>
				case 10:ClrBit(PORTD,LED1); led = LED1;  break;
 110:	82 b3       	in	r24, 0x12	; 18
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	82 bb       	out	0x12, r24	; 18
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 11c:	c1 cf       	rjmp	.-126    	; 0xa0 <main+0x4>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
