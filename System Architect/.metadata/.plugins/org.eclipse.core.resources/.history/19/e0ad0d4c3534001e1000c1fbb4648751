/*
 * main.c
 *
 *  Created on: Aug 6, 2023
 *      Author: OmArHerp
 */

#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "conio.h"


//Essential Data
struct Sdata
{
	int ID;
	char name[40];
	float height;
};

//Linked List Node
struct SStudent
{
	struct Sdata student;
	struct SStudent* PNextStudent;
};

//Create a Head Pointer
struct SStudent* gpFirstStudent = NULL;


void AddStudent()
{
	struct SStudent* pNewStudent;
	struct SStudent* pLastStudent;
	char temp_text[40];
	//If list is Empty
	if(gpFirstStudent == NULL)
	{
		//create a new node
		pNewStudent =(struct SStudent* ) malloc (sizeof(struct SStudent));
		//Assign it to the Head Pointer
		gpFirstStudent = pNewStudent;

	}
	//If Not
	else
	{
		//Navigate though the list till the last node
		pLastStudent = gpFirstStudent;
		while(pLastStudent->PNextStudent != NULL)
		{
			pLastStudent = pLastStudent->PNextStudent;
		}

		//create a new node
		pNewStudent =(struct SStudent* ) malloc (sizeof(struct SStudent));
		pLastStudent->PNextStudent = pNewStudent;
	}

	//Check if Nodes were created successfully
	if(pNewStudent == NULL)
	{
		printf("Profile creating failed ------ returning back \n");
		return;
	}

	//Fill the Profile
	printf("\n Enter the ID: ");
	gets(temp_text);
	pNewStudent->student.ID = atoi(temp_text);

	printf("\n Enter student full name :  ");
	gets(pNewStudent->student.name);


	printf("\n Enter the height : ");
	gets(temp_text);
	pNewStudent->student.height = atof(temp_text);

	//Set the next_pointer (new_student) to NULL
	pNewStudent->PNextStudent = NULL;

}

void delete_student()
{
	char temp_text[40];
	unsigned int selected_id;
	//get the selected ID
	printf("\nEnter the selected ID to be deleted : ");
	gets(temp_text);
	selected_id = atoi(temp_text);

	//if list is not empty
	if(gpFirstStudent)
	{
		struct SStudent* pSelectedStudent = gpFirstStudent;
		struct SStudent* pPreviousStudent = gpFirstStudent;

		//ID detected on first
		if(pSelectedStudent->student.ID == selected_id && pPreviousStudent->student.ID == selected_id)
		{
			gpFirstStudent = pSelectedStudent->PNextStudent;
			free(pSelectedStudent);
			return;
		}
		else //ID Detected elsewhere
		{
			//Loop on all nodes
			while(pSelectedStudent)
			{
				//selected_student is ahead of previous_student
				pSelectedStudent = pSelectedStudent->PNextStudent ;

				if(pSelectedStudent->student.ID == selected_id )
				{
					//If It was the last element
					if(pSelectedStudent->PNextStudent == NULL)
					{
						pPreviousStudent->PNextStudent = NULL;
						free(pSelectedStudent);
						return;
					}
					else
					{
						pPreviousStudent->PNextStudent = pSelectedStudent->PNextStudent;
						free(pSelectedStudent);
						return;
					}
				}

				pPreviousStudent = pPreviousStudent->PNextStudent;
			}

		}
	}
	printf("\n cannot find student ID.");
				return;
}


int main()
{






	return 0;
}

