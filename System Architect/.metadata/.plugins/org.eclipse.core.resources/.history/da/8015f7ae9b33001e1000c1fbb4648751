/*
 * FIFO.c
 *
 *  Created on: Aug 5, 2023
 *      Author: OmArHerp
 */

#include "FIFO.h"

FIFO_status FIFO_Init(FIFO_Buf_t* queue , DataType* buf, uint32_t length)
{
	if (buf == NULL)
		return FIFO_Null ;
	queue->base = buf;
	queue->head = buf;
	queue->tail = buf;
	queue->length = length;
	queue->count = 0;

	return FIFO_No_Error ;
}
FIFO_status FIFO_Enqueue(FIFO_Buf_t* queue , DataType  item)
{
	if(!queue->base || !queue->head || !queue ->tail)
		return FIFO_Null ;

	//If Queue is full
	if (FIFO_Is_Full(queue) == FIFO_Full)
		return FIFO_Full ;

	*(queue->head) = item;
	queue->count++;
	//Circular Queue
	if(queue->head >= queue->base + ( queue->length * sizeof(DataType) ) )
		queue->head = queue->head;
	else
		queue->head++ ;

}
FIFO_status FIFO_Dequeue (FIFO_Buf_t* queue , DataType* item)
{

}
FIFO_status FIFO_Is_Full (FIFO_Buf_t* queue)
{
	if(!queue->base || !queue->head || !queue ->tail)
			return FIFO_Null ;
	if(queue->count == queue->length)
		return FIFO_Full ;
	return FIFO_No_Error ;

}
FIFO_status FIFO_Is_Empty (FIFO_Buf_t* queue)
{

}
void FIFO_Print (FIFO_Buf_t* queue)
{

}
