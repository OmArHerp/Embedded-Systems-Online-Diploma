
Unit6_Lesson4_Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030f  00000000  00000000  00000f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_2>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_Init>:



void GPIO_Init()
{
	DDRD |= (0b111 << 5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << 2);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8b 7f       	andi	r24, 0xFB	; 251
  76:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << 3);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	87 7f       	andi	r24, 0xF7	; 247
  7c:	81 bb       	out	0x11, r24	; 17
	DDRB &= ~(1 << 2);
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	87 bb       	out	0x17, r24	; 23
  84:	08 95       	ret

00000086 <Interrupt_init>:
}
void Interrupt_init()
{
	//EXT0 Logical Change
	MCUCR |= 0b01;
  86:	85 b7       	in	r24, 0x35	; 53
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bf       	out	0x35, r24	; 53
	//EXT1 Rising Edge
	MCUCR |= (0b11 << 2);
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	8c 60       	ori	r24, 0x0C	; 12
  90:	85 bf       	out	0x35, r24	; 53
	//EXT2 Falling Edge
	MCUCSR &= ~(1 << 6);
  92:	84 b7       	in	r24, 0x34	; 52
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	84 bf       	out	0x34, r24	; 52
	//Enable EXT0,1,2
	GICR |= (0b111 << 5);
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 6e       	ori	r24, 0xE0	; 224
  9c:	8b bf       	out	0x3b, r24	; 59
	//Enable GIE
	SREG |= (1 << 7);
  9e:	8f b7       	in	r24, 0x3f	; 63
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8f bf       	out	0x3f, r24	; 63
  a4:	08 95       	ret

000000a6 <main>:
	
}

int main(void)
{
	GPIO_Init();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_Init>
	Interrupt_init();
  aa:	0e 94 43 00 	call	0x86	; 0x86 <Interrupt_init>
    /* Replace with your application code */
    while (1) 
    {
		PORTD &= ~(1 << 5);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << 6);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	8f 7b       	andi	r24, 0xBF	; 191
  b8:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << 7);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	82 bb       	out	0x12, r24	; 18
  c0:	f6 cf       	rjmp	.-20     	; 0xae <main+0x8>

000000c2 <__vector_1>:
    }
}

ISR(INT0_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	PORTD |= (1 << 5);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <__vector_1+0x1c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <__vector_1+0x26>
  e8:	00 00       	nop
	_delay_ms(1000);
	
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:
ISR(INT1_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
	PORTD |= (1 << 6);
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	82 bb       	out	0x12, r24	; 18
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	81 ee       	ldi	r24, 0xE1	; 225
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <__vector_2+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_2+0x26>
 120:	00 00       	nop
	_delay_ms(1000);
	
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_3>:
ISR(INT2_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	PORTD |= (1 << 7);
 142:	82 b3       	in	r24, 0x12	; 18
 144:	80 68       	ori	r24, 0x80	; 128
 146:	82 bb       	out	0x12, r24	; 18
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <__vector_3+0x1c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <__vector_3+0x26>
 158:	00 00       	nop
	_delay_ms(1000);
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
